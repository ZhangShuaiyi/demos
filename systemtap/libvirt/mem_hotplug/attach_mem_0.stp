probe begin {
    printf("Begin probe!\n");
}

function print_virJson(props, dep) {
    type = @cast(props, "_virJSONValue", "/usr/lib64/libvirt.so")->type;
    if (type == 0) {
        npairs = @cast(props, "_virJSONValue", "/usr/lib64/libvirt.so")->data->object->npairs;
        printf("(npairs:%d)\n", npairs);
        for (i=0; i<npairs; i++) {
            printf("%*s%s::", dep, "", user_string(@cast(props, "_virJSONValue", "/usr/lib64/libvirt.so")->data->object->pairs[i]->key));
            print_virJson(@cast(props, "_virJSONValue", "/usr/lib64/libvirt.so")->data->object->pairs[i]->value, dep+2);
        }
    } else if (type == 2) {
        t_str = user_string(@cast(props, "_virJSONValue", "/usr/lib64/libvirt.so")->data->string);
        printf("%s\n", t_str);
    } else if (type == 3) {
        t_num = user_string(@cast(props, "_virJSONValue", "/usr/lib64/libvirt.so")->data->number);
        printf("%s\n", t_num);
    } else {
        printf("%s!!type:%d\n", indent(0), type);
    }
}

probe process("/usr/lib64/libvirt/connection-driver/libvirt_driver_qemu.so").function("qemuDomainAttachMemory") {
    total_memory = $vm->def->mem->total_memory;
    cur_balloon = $vm->def->mem->cur_balloon;
    max_memory = $vm->def->mem->max_memory;
    memory_slots = $vm->def->mem->memory_slots;
    printf("%s vm->def->mem(total_memory:%ld cur_balloon:%ld max_memory:%ld memory_slots:%d) def->nmems:%d\n\t"
            " mem(size:%ld model:%d) mem->info->alias:%p\n", ppfunc(),
            total_memory, cur_balloon, max_memory, memory_slots, $vm->def->nmems,
            $mem->size, $mem->model, $mem->info->alias);
}

probe process("/usr/lib64/libvirt/connection-driver/libvirt_driver_qemu.so").function("qemuBuildMemoryDeviceStr").return {
    printf("%s mem->info->alias:%s devstr:%s\n", ppfunc(), user_string($mem->info->alias), user_string($return));
}


probe process("/usr/lib64/libvirt/connection-driver/libvirt_driver_qemu.so").function("qemuBuildMemoryBackendProps") {
    printf("%s alias:%s mem(pagesize:%d size:%ld)\n", ppfunc(), user_string($alias), $mem->pagesize, $mem->size);
}


probe process("/usr/lib64/libvirt/connection-driver/libvirt_driver_qemu.so").function("qemuBuildMemoryBackendProps").return {
    printf("%s return backendProps:\n", ppfunc());
    printf("======\n");
    print_virJson(user_long($backendProps), 2);
    printf("======\n");
}
