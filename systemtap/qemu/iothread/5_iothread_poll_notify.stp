# stap -d /usr/lib64/libpthread-2.17.so -d /usr/lib64/libc-2.17.so -d /usr/lib64/libglib-2.0.so xxx.stp
global t_fd;
probe begin {
    t_fd = $1;
    printf("Begin probe fd:%d\n", t_fd);
}

probe process("/usr/libexec/qemu-kvm").function("aio_set_fd_handler") {
    printf("===%s ctx:%p fd:%d\n", ppfunc(), $ctx, $fd);
    print_ubacktrace();
}

probe process("/usr/libexec/qemu-kvm").function("qemu_poll_ns") {
    task_name = task_execname(task_current());
    if (substr(task_name, 0, 3) == "IO ") {
        printf("task:%d(%s) %s npfd:%d timeout:%ld\n", tid(), task_name, ppfunc(), $nfds, $timeout);
        for (i=0; i<$nfds; i++) {
            printf("  fd:%d", $fds[i]->fd);
        }
        printf("\n");
    }
}

probe process("/usr/libexec/qemu-kvm").function("qemu_laio_completion_cb"),
      process("/usr/libexec/qemu-kvm").function("event_notifier_dummy_cb") {
    task_name = task_execname(task_current());
    if (substr(task_name, 0, 3) == "IO ") {
        printf("%s rfd:%d wfd:%d\n", ppfunc(), $e->rfd, $e->wfd);
    }
}

probe process("/usr/libexec/qemu-kvm").function("virtio_queue_host_notifier_aio_read") {
    task_name = task_execname(task_current());
    if (substr(task_name, 0, 3) == "IO ") {
        printf("%s rfd:%d wfd:%d\n", ppfunc(), $n->rfd, $n->wfd);
    }
}

probe syscall.pwritev,
      syscall.preadv {
    if (fd == t_fd) {
        print_ubacktrace();
    }
}

/*
probe process("/usr/libexec/qemu-kvm").function("qemu_laio_completion_cb"),
      process("/usr/libexec/qemu-kvm").function("qemu_laio_poll_cb"),
      process("/usr/libexec/qemu-kvm").function("event_notifier_dummy_cb"),
      process("/usr/libexec/qemu-kvm").function("event_notifier_poll") {
    task_name = task_execname(task_current());
    if (substr(task_name, 0, 3) == "IO ") {
        printf("%s rfd:%d wfd:%d\n", ppfunc(), $e->rfd, $e->wfd);
    }
}

probe process("/usr/libexec/qemu-kvm").function("virtio_queue_host_notifier_aio_read"),
      process("/usr/libexec/qemu-kvm").function("virtio_queue_host_notifier_aio_poll") {
    task_name = task_execname(task_current());
    if (substr(task_name, 0, 3) == "IO ") {
        printf("%s rfd:%d wfd:%d\n", ppfunc(), $n->rfd, $n->wfd);
    }
}
*/
