probe begin {
    warn("Begin probe!\n");
}

probe process("/usr/libexec/qemu-kvm").mark("vfio_region_setup") {
    printf("vfio_region_setup vbasedev->name(%s) index:%d name(%s) region{flags:0x%x fd_offset:0x%lx size:%d}\n",
            user_string($arg1), $arg2, user_string($arg3), $arg4, $arg5, $arg6);
}

probe process("/usr/libexec/qemu-kvm").mark("vfio_region_sparse_mmap_header") {
    printf("vfio_region_sparse_mmap_header region->vbasedev->name(%s) region->nr:%d sparse->nr_areas:%d\n",
            user_string($arg1), $arg2, $arg3);
}

probe process("/usr/libexec/qemu-kvm").mark("vfio_region_sparse_mmap_entry") {
    printf("vfio_region_sparse_mmap_entry sparse->areas i:%d start:0x%lx end:0x%lx\n",
            $arg1, $arg2, $arg3);
}

probe process("/usr/libexec/qemu-kvm").mark("vfio_region_mmap") {
    printf("vfio_region_mmap name:%s offset:0x%lx end:0x%lx\n", user_string($arg1), $arg2, $arg3);
}

probe process("/usr/libexec/qemu-kvm").mark("kvm_set_user_memory") {
    printf("kvm_set_user_memory kvm_userspace_memory_region {"
            "slot:%d flags:0x%lx guest_phys_addr:0x%lx memory_size:0x%lx userspace_addr:0x%lx} ret:%d\n",
            $arg1, $arg2, $arg3, $arg4, $arg5, $arg6);
}

probe syscall.mmap2 {
    if (pid() == target()) {
        printf("%s start:0x%lx length:0x%lx prot:0x%lx prot_str:%s flags:0x%lx flags_str:%s fd:%d pgoffset:0x%lx\n",
                name, start, length, prot, prot_str, flags, flags_str, fd, pgoffset);
    }
}

probe kernel.function("remap_pfn_range") {
    if (pid() == target())
        printf("%s vma:0x%lx addr:0x%lx pfn:0x%lx size:0x%lx\n",
                ppfunc(), $vma, $addr, $pfn, $size);
}
